
plugins {
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'jacoco'
    id 'pmd'
    id 'info.solidsoft.pitest' version '1.1.11'
    id 'org.sonarqube' version '2.4'
    id 'com.jfrog.bintray' version '1.7.3'
    id 'org.ajoberstar.github-pages' version '1.7.1'
    id 'com.github.nwillc.vplugin' version '2.1.1'
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'http://jcenter.bintray.com' }
    mavenCentral()
}

dependencies {
    compile  'org.tinylog:tinylog:1.2',
            'junit:junit:4.12',
            'org.assertj:assertj-core:' + assertj_version

    runtime 'org.tinylog:slf4j-binding:1.2'

    testCompile 'junit:junit:4.12',
            'com.github.nwillc:jdk_contract_tests:1.8.2',
            'org.mockito:mockito-core:' + mockito_core_version,
            'org.assertj:assertj-core:' + assertj_version
}

configurations {
    compile.exclude group: 'org.slf4j', module: 'slf4j-simple'
}

group = 'com.github.nwillc'
version = '0.4.2'
targetCompatibility = '1.8'
sourceCompatibility = '1.8'

test {

    beforeTest { descriptor ->
        logger.lifecycle("\tRunning $descriptor.className.$descriptor.name")
    }

    afterSuite { descriptor, result ->
        if (descriptor.parent == null) {
            logger.lifecycle("\tTests run: $result.testCount, Failures: $result.failedTestCount, Skipped: $result.skippedTestCount")
        }
    }

    testLogging {
        exceptionFormat 'full'
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
        }
    }
}

bintrayUpload.onlyIf { !project.version.toString().endsWith('SNAPSHOT') }

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')

    dryRun = false
    publish = true
    publications = ['mavenJava']
    pkg {
        repo = 'maven'
        name = project.name
        desc = 'Simple/trivial light weight object persistence approach.'
        websiteUrl = 'https://github.com/nwillc/opa'
        issueTrackerUrl = 'https://github.com/nwillc/opa/issues'
        vcsUrl = 'https://github.com/nwillc/opa.git'
        licenses = ['ISC']
        labels = ['jdk8', 'persistence']
        publicDownloadNumbers = true
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    ruleSets = [
            'java-basic',
            'java-braces',
            'java-naming',
            'java-clone',
            'java-codesize',
            'java-controversial',
            'java-design',
            'java-finalizers',
            'java-imports',
            'java-junit',
            'java-logging-java',
            'java-migrating',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-sunsecure',
            'java-typeresolution',
            'java-unusedcode'
    ]
}

githubPages {
    pages {
        from javadoc
        into 'javadoc'
    }
}

pitest {
    threads = 4
    timestampedReports = false
    outputFormats = ['XML', 'HTML']
}
