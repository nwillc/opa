
buildscript {
    repositories {
        mavenLocal()
        maven {
            url mvn_repository
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'gradle.plugin.com.github.nwillc:vplugin:2.1.1',
                'org.ajoberstar:gradle-git:1.7.2',
                'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3',
                'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.2.2'
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'com.github.nwillc.vplugin'
apply plugin: 'org.ajoberstar.github-pages'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'info.solidsoft.pitest'

repositories {
    mavenLocal()
    maven {
        url mvn_repository
    }
}

configurations {
    compile.exclude group: 'org.slf4j', module: 'slf4j-simple'
    all*.exclude group: 'org.junit.jupiter'
}

dependencies {
    compile "org.tinylog:tinylog:$tinylog_version",
            "com.fasterxml.jackson.core:jackson-core:$jackson_fasterxml_version",
            "com.fasterxml.jackson.core:jackson-databind:$jackson_fasterxml_version",
            "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jackson_fasterxml_version",
            "org.mongodb:mongo-java-driver:$mongo_driver_version",
            "junit:junit:$junit_version",
            "org.assertj:assertj-core:$assertj_version",
            "com.github.nwillc:fun-jdbc:$fun_jdbc_version"

    runtime "org.tinylog:slf4j-binding:$tinylog_version"

    testCompile "junit:junit:$junit_version",
            "com.h2database:h2:$h2database_version",
            "com.github.nwillc:jdk_contract_tests:$jdk_contracts_version",
            "org.mockito:mockito-core:$mockito_core_version",
            "org.assertj:assertj-core:$assertj_version",
            "com.github.fakemongo:fongo:$fongo_version",
            'org.apache.commons:commons-dbcp2:2.1.1'
}

group = 'com.github.nwillc'
version = '0.6.3'
targetCompatibility = '1.8'
sourceCompatibility = '1.8'

test {

    beforeTest { descriptor ->
        logger.lifecycle("\tRunning $descriptor.className.$descriptor.name")
    }

    afterSuite { descriptor, result ->
        if (descriptor.parent == null) {
            logger.lifecycle("\tTests run: $result.testCount, Failures: $result.failedTestCount, Skipped: $result.skippedTestCount")
        }
    }

    testLogging {
        exceptionFormat 'full'
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
        }
    }
}

bintrayUpload.onlyIf { !project.version.toString().endsWith('SNAPSHOT') }

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')

    dryRun = false
    publish = true
    publications = ['mavenJava']
    pkg {
        repo = 'maven'
        name = project.name
        desc = 'Simple/trivial light weight object persistence approach.'
        websiteUrl = 'https://github.com/nwillc/opa'
        issueTrackerUrl = 'https://github.com/nwillc/opa/issues'
        vcsUrl = 'https://github.com/nwillc/opa.git'
        licenses = ['ISC']
        labels = ['jdk8', 'persistence']
        publicDownloadNumbers = true
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    ruleSets = [
            'java-basic',
            'java-braces',
            'java-naming',
            'java-clone',
            'java-codesize',
            'java-controversial',
            'java-design',
            'java-finalizers',
            'java-imports',
            'java-junit',
            'java-logging-java',
            'java-migrating',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-sunsecure',
            'java-typeresolution',
            'java-unusedcode'
    ]
}

githubPages {
    pages {
        from javadoc
        into 'javadoc'
    }
}

pitest {
    threads = 4
    pitestVersion = '1.2.4'
    timestampedReports = false
    outputFormats = ['XML', 'HTML']
}
